#! /usr/bin/env bash

# Bash strict mode
set -euo pipefail

USAGE="Usage
===

  $ ./qa-deploy --production PRODUCTION_URL [--tag IMAGE_TAG] [--staging STAGING_URL]


Description
---
Deploy locally to microk8s.

--production: Deploy this ingress from the ingresses/production folder
--staging: Deploy this ingress from the ingresses/staging folder
--tag: Deploy the service for the 'production' domain from the services/ folder, at this Docker tag
"

function invalid() {
    message=${1}
    echo "Error: ${message}"
    echo ""
    echo "$USAGE"
    exit 1
}

function add_secret_key() {
    if ! microk8s.kubectl get secret snapcraft-io-config &> /dev/null; then
        microk8s.kubectl create secret generic snapcraft-io-config --from-literal=SECRET_KEY=admin --from-literal=CSRF_SECRET_KEY=admin --from-literal='SENTRY_DSN=' --from-literal='SENTRY_PUBLIC_DSN='
    fi
}

function add_docker_credentials_microk8s() {
    if ! microk8s.kubectl get secret registry-access &> /dev/null; then

        username=""
        password=""
        while [[ -z "${username}" || -z "${password}" ]]; do
            echo "##############"
            echo "Docker registry credentials"
            echo
            echo -n "Username: "
            read username
            echo -n "Password: "
            read -s password
            echo -e "\n##############"
        done

        microk8s.kubectl create secret docker-registry registry-access --docker-server=prod-comms.docker-registry.canonical.com --docker-username="${username}" --docker-password="${password}" --docker-email=root@localhost

        microk8s.kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "registry-access"}]}' --namespace default
    fi
}

function apply_configuration() {
    microk8s.kubectl apply -f config.global.yaml --namespace kube-system
    microk8s.kubectl apply -f config.qa.yaml
}

function run_microk8s() {
    # Run microk8s
    if ! command -v microk8s.kubectl &> /dev/null; then
        if ls /snap/microk8s &> /dev/null; then
            echo "Enabling microk8s"
            snap enable microk8s
            echo "> Waiting for microk8s to wake up ..."
            sleep 10
        else
            echo "Please install or enable microk8s (https://github.com/juju-solutions/microk8s)"
            echo ""
            echo "    snap install microk8s --classic --edge"
            exit 1
        fi
    fi

    if ! microk8s.kubectl get service/default-http-backend &> /dev/null; then
        echo "HTTP backend not found: Enabling ingress addon"
        microk8s.enable ingress
    fi
}

function deploy_service() {
    service="${1}"
    tag="${2}"

    cat "services/${service//./-}.yaml" | sed "s|[:][$][{]TAG_TO_DEPLOY[_aa-zA-Z]*[}]|:${tag}|" | sed 's|replicas: [0-9][0-9]*|replicas: 1|' | microk8s.kubectl apply --filename -
}

function deploy_ingress() {
    ingress="${1}"
    # Create the ingress domains
    cat "ingresses/${ingress//./-}.yaml" | sed '/namespace:/d' | microk8s.kubectl apply --filename -
}

function run() {
    # Arguments
    while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
        key="$1"
        case $key in
            -t|--tag)
                if [ -z "${2:-}" ]; then invalid "Missing image tag. Usage: --tag XXXX"; fi
                tag_to_deploy=${2}
                shift
            ;;
            -p|--production)
                if [ -z "${2:-}" ]; then invalid "Missing production. Usage: --production XXXX"; fi
                production=${2}
                shift
            ;;
            -s|--staging)
                if [ -z "${2:-}" ]; then invalid "Missing staging. Usage: --staging XXXX"; fi
                staging=${2}
                shift
            ;;
            *) invalid "Option '${key}' not recognised." ;;
        esac
        shift
    done

    # Mandatory arguments
    if [ -z "${production:-}" ]; then invalid "No production domain specified (e.g. 'example.com')"; fi

    run_microk8s
    add_secret_key

    add_docker_credentials_microk8s

    if [ -n "${tag_to_deploy:-}" ]; then
        deploy_service "${production}" "${tag_to_deploy}"
    fi

    deploy_ingress "production/${production}"

    if [ -n "${staging:-}" ]; then deploy_ingress "staging/${staging}"; fi
    apply_configuration
}

run ${@}
